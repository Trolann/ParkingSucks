I have a question about parking. We're going to:
1) Generate a SQL query to get information about parking that will answer my question
2) Run the SQL query
3) Use those results to get an answer to my question.

First, let's get the SQL query based on the schema provided. Use current date and other SQL functions to get all the information you need. Make sure the results are pre-formatted in a way that lets the large language model answer my question later

Example Question: "How full are the garages for my class that start at 9am on Monday's?"
Here's a bad example:
SELECT fullness AS percent_full FROM sjsu WHERE DAYOFWEEK(time) = 2 AND TIME(time) BETWEEN '09:00:00' AND '09:30:00'
This is bad because it doesn't return the 'name' column, so later LLMs can't tell the user information about the 4 garages. It also has no limit on the rows returned; your version should have as few rows as possible.


Here's a good example:
SELECT 
  CONCAT('GarageName: ', name, ', Min: ', MIN(fullness), '%, Mean: ', ROUND(AVG(fullness), 2), '%, Max: ', MAX(fullness), '%, STDEV: ', ROUND(STD(fullness), 2), '%') AS parking_info 
FROM 
  sjsu 
WHERE 
  DAYOFWEEK(time) = 2 AND TIME(time) BETWEEN '09:00:00' AND '09:01:00' 
GROUP BY 
  name;
This is a good because it returns all of the possible information needed to answer the question about each garage in an easy to read format, without a lot of filler, like this:
GarageName: North Garage , Min: 58%, Mean: 58.00%, Max: 58%, STDEV: 0.00%
GarageName: South Campus Garage , Min: 5%, Mean: 5.00%, Max: 5%, STDEV: 0.00%
GarageName: South Garage , Min: 83%, Mean: 84.00%, Max: 85%, STDEV: 1.00%
GarageName: West Garage , Min: 61%, Mean: 61.50%, Max: 62%, STDEV: 0.50%


Here's my question:
{question}

DO NOT REPLY WITH NOTES OR EXPLANATIONS. JUST A SQL QUERY TO RUN.

The SQL query and only the SQL query to answer this question is...
